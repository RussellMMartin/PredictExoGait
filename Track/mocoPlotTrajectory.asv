
function mocoPlotTrajectory(trajA, trajB, nameA, nameB)
% Plot a MocoTrajectory. Optionally, specify a second trajectory and names
% for the trajectories.
% For a generic version of this function, see the utility
% osimMocoTrajectoryReport.m.

import org.opensim.modeling.*;

if ischar(trajA)
    trajA = MocoTrajectory(trajA);
end
if nargin > 1 && ischar(trajB)
    trajB = MocoTrajectory(trajB);
end
%% States.
figure('units','normalized','outerposition',[0 0 1 1]);
stateNames = trajA.getStateNames();
numStates = stateNames.size();
dim = sqrt(numStates);
if dim == ceil(dim)
    numRows = dim;
    numCols = dim;
else
    numCols = min(numStates, 4);
    numRows = floor(numStates / 4);
    if mod(numStates, 4) ~= 0
        numRows = numRows + 1;
    end
end
for i = 0:numStates-1
    subplot(numRows, numCols, i+1);
    plot(trajA.getTimeMat(), ...
         trajA.getStateMat(stateNames.get(i)), '-r', ...
         'linewidth', 3);
    if nargin > 1
        hold on
        plot(trajB.getTimeMat(), ...
             trajB.getStateMat(stateNames.get(i)), '--b', ...
             'linewidth', 2.5);
        hold off
    end
    
    stateName = char(stateNames.get(i));
    title(stateName(11:end), 'Interpreter', 'none')
    xlabel('time (s)')
    if contains(stateName, 'value')
        ylabel('position (rad)')
    elseif contains(stateName, 'speed')
        ylabel('speed (rad/s)')
    elseif contains(stateName, 'activation')
        ylabel('activation (-)')
        ylim([0, 1])
    end
    if i == 0 && nargin > 1
        if nargin == 4
            legend(nameA, nameB);
        else
            legend('A', 'B');
        end
    end
end
sgtitle('States')
% formatAndSaveAsPDF('.\Results\', 'States')

%% Controls.
figure('units','normalized','outerposition',[0 0 1 1]);
controlNames = trajA.getControlNames();
numControls = controlNames.size();
dim = sqrt(numControls);
if dim == ceil(dim)
    numRows = dim;
    numCols = dim;
else
    numCols = min(numControls, 4);
    numRows = floor(numControls / 4);
    if mod(numControls, 4) ~= 0
        numRows = numRows + 1;
    end
end
for i = 0:numControls-1
    subplot(numRows, numCols, i+1);
    yA = trajA.getControlMat(controlNames.get(i));
    plot(trajA.getTimeMat(), yA, '-r', 'linewidth', 3);
    if nargin > 1
        hold on
        yB = trajB.getControlMat(controlNames.get(i));
        plot(trajB.getTimeMat(), yB, '--b', 'linewidth', 2.5);
        hold off
    end
    title(char(controlNames.get(i)), 'Interpreter', 'none')
    xlabel('time (s)')
    ylabel('value')
    if max(yA) <= 1 && min(yA) >= 0
        fixYLim = true;
        if nargin > 1 && (max(yB) > 1 || min(yB) < 0)
            fixYLim = false;
        end
        if fixYLim
            ylim([0, 1]);
        end
    end
    if i == 0 && nargin > 1
        if nargin == 4
            legend(nameA, nameB);
        else
            legend('A', 'B');
        end
    end
end
sgtitle('Controls')
% formatAndSaveAsPDF('.\Results\', 'Controls')

return

function formatAndSaveAsPDF(dir, name)
    clear figure_property;
    figure_property.units = 'inches';
    figure_property.format = 'pdf';
    figure_property.Preview= 'none';
    figure_property.Width= '22'; % Figure width on canvas
    figure_property.Height= '20'; % Figure height on canvas
    figure_property.Units= 'inches';
    figure_property.Color= 'rgb';
    figure_property.Background= 'w';
    figure_property.FixedfontSize= '4';
    figure_property.ScaledfontSize= 'auto';
    figure_property.FontMode= 'scaled';
    figure_property.FontSizeMin= '4';
    figure_property.FixedLineWidth= '1';
    figure_property.ScaledLineWidth= 'auto';
    figure_property.LineMode= 'none';
    figure_property.LineWidthMin= '0.1';
    figure_property.FontName= 'Arial';% Might want to change this to something that is available
    figure_property.FontWeight= 'auto';
    figure_property.FontAngle= 'auto';
    figure_property.FontEncoding= 'latin1';
    figure_property.PSLevel= '3';
    figure_property.Renderer= 'painters';
    figure_property.Resolution= '400';
    figure_property.LineStyleMap= 'none';
    figure_property.ApplyStyle= '0';
    % figure_property.Bounds= 'tight';
    % figure_property.LockAxes= 'off';
    % figure_property.LockAxesTicks= 'off';
    figure_property.ShowUI= 'off';
    figure_property.SeparateText= 'off';
    chosen_figure=gcf;
    set(chosen_figure,'PaperUnits','inches');
    set(chosen_figure,'PaperPositionMode','auto');
    set(chosen_figure,'PaperSize',[str2num(figure_property.Width) str2num(figure_property.Height)]); % Canvas Size
    set(chosen_figure,'Units','inches');
    hgexport(gcf,[dir, name, '.pdf'],figure_property); %Set desired file name
return
